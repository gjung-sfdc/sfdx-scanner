# Javascript Node CircleCI configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1
defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: circleci/openjdk:11.0.2-jdk-node

orbs:
  win: circleci/windows@2.2.0 # The Windows orb give you everything you need to start using the Windows executor.
  release-management: salesforce/npm-release-management@3.5.1
  gradle: circleci/gradle@2.2.0


commands:
  https_checkout:
    steps:
      - run: |
          if [ -z "$CIRCLE_BRANCH" ]
          then
            git clone "https://github.com/forcedotcom/sfdx-scanner.git" --branch "$CIRCLE_TAG" ~/repo
          else
            git clone "https://github.com/forcedotcom/sfdx-scanner.git" --branch "$CIRCLE_BRANCH" ~/repo
          fi
jobs:
  build:
    <<: *defaults
    steps:
      - https_checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: yarn --ignore-scripts
      - run: yarn build

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

      - persist_to_workspace:
          root: ~/repo
          paths: .

      # UNIT TESTS
      - run:
          name: test
          command: yarn test --reporter mocha-junit-reporter --reporter-option mochaFile=test-results/mocha/test-results.xml
          when: always

      - run:
          name: eslint
          command: yarn lint --format junit --output-file test-results/eslint/eslint.xml
          when: always

      - gradle/collect_test_results:
          reports_path: pmd-cataloger/build/reports/
          test_results_path: pmd-cataloger/build/test-results/

      - store_test_results:
          path: test-results

      - store_artifacts: # upload test coverage as artifact.
          path: test-coverage
  windows-build:
    executor:
      name: win/default # executor type
      size: "medium"
      # Necessary to explicitly use bash, otherwise gradlew's status code won't be received and the job will hang.
      shell: bash.exe
    working_directory: C:\repo
    steps:
      - attach_workspace:
          at: C:\repo

      - run: mkdir test-results

      # UNIT TESTS
      - run:
          name: test
          command: yarn test --reporter mocha-junit-reporter --reporter-option mochaFile=test-results/mocha/test-results.xml
          when: always

      - run:
          name: eslint
          command: yarn lint --format junit --output-file test-results/eslint/eslint.xml
          when: always

      - gradle/collect_test_results:
          reports_path: pmd-cataloger/build/reports/
          test_results_path: pmd-cataloger/build/test-results/

      - store_test_results:
          path: test-results

      - store_artifacts: # upload test coverage as artifact.
          path: test-coverage

  self-evaluation:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo

      - run: mkdir test-results

      - run:
          name: "list rules"
          command: bin/run scanner:rule:list

      - run:
          name: "self-evaluate"
          command: |
            bin/run scanner:run --target ./src --format junit --outfile ./test-results/src.xml --violations-cause-error
          # TODO: We'll also need to make it scan the pmd-cataloger folder once we have an easy way of making it target Java.
          # bin/run scanner:run --target ./pmd-cataloger --format junit --outfile ./test-results/pmd-cataloger.xml --violations-cause-error

      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-results

  unpackaged-sanity:
    executor:
      name: win/default # executor type
      size: "medium"
    working_directory: C:\repo

    steps:
      # Commands are run in a Windows virtual machine environment
      - attach_workspace:
          at: C:\repo

      - run: md test-results

      - run:
          name: "List rules"
          command: bin\run.cmd scanner:rule:list

      - run:
          name: "Run rules"
          working_directory: test\projects\app
          command: ..\..\..\bin\run.cmd scanner:run --target force-app --format junit --outfile ..\..\..\test-results\app.xml

      # Upload results
      - store_test_results:
          path: test-results

  packaged-sanity:
    executor:
      name: win/default # executor type
      size: "medium"

    steps:
      - https_checkout

      - run:
          name: "Install sfdx cli"
          shell: cmd.exe
          command: npm install -g sfdx-cli

      - run:
          name: "Install plugin"
          shell: cmd.exe
          command: echo y | sfdx plugins:install --force @salesforce/sfdx-scanner

      - run:
          name: "List rules"
          command: sfdx scanner:rule:list

      - run:
          name: "Run rules"
          working_directory: test\projects\app
          command: sfdx scanner:run --target force-app --format junit --outfile ..\..\..\test-results\app.xml

      # Upload results
      - store_test_results:
          path: test-results

  auto-merge-release:
    <<: *defaults
    steps:
      - add_ssh_keys:
          fingerprints:
            - "e2:99:c9:bf:d6:40:04:d6:56:48:05:eb:1a:41:f6:a4"
      - https_checkout
      - run:
          name: "Merge release"
          command: |
            git config user.email "isv.swat@salesforce.com"
            git config user.name "$CIRCLE_USERNAME"
            git checkout dev
            git pull origin dev
            git merge release --commit --no-edit -m "Automerge release to dev"
            git push origin dev
  publish-latest:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo

      - run:
          name: Verify branch of origin
          command: |
            if [ -z "$CIRCLE_TAG" ]
            then
               # If we're not actually working from a tag, then just exit. We only want to deploy tags.
               exit 1
            fi
            # For these two exports, the git command is logging out every local and remote branch that contains the tag.
            # That gets piped into a grep command so we can look for specific branches in the results.
            export CONTAINED_IN_RELEASE=$(git branch -a --contains tags/$CIRCLE_TAG|grep release)
            export CONTAINED_IN_MASTER=$(git branch -a --contains tags/$CIRCLE_TAG|grep master)
            # Our typical flow is feature branch -> dev -> release -> master. We want to publish tags based on release.
            # So we'll abort if the tag isn't present in release, or if it's present in master.
            if [ -z "$CONTAINED_IN_RELEASE" ] || [ -n "$CONTAINED_IN_MASTER" ]
            then
               exit 1
            fi

      - run:
          command: npm run prepack
      # Update the path so that node modules installed by the release-management orb are found
      # See https://discuss.circleci.com/t/how-to-add-a-path-to-path-in-circle-2-0/11554
      - run: echo 'export PATH=$HOME/.config/yarn/global/node_modules/.bin:$PATH' >> $BASH_ENV
      - release-management/sign
      - release-management/publish:
          access: public
          tag: latest
          use_tarfile: true
      - release-management/create-github-release
    environment:
      # Fingerprint for developer.salesforce.com
      SFDX_DEVELOPER_TRUSTED_FINGERPRINT: "3E:6C:CA:83:EA:88:92:E0:6C:7C:5C:ED:43:A6:0A:6C:33:74:5E:7F"

workflows:
  version: 2.1
  test-publish:
    jobs:
      - build:
          filters:
            # We want this to run against all tags and branches. Branches are inclusive by default, so we don't need to
            # specify anything. But tags are exclusive by default, so we need to specify that all tags should be included.
            tags:
              only: /.*/
      - windows-build:
          requires:
            - build
      - unpackaged-sanity:
          requires:
            - windows-build
      - self-evaluation:
          requires:
            - windows-build
      - publish-latest:
          # This job should only run after 'build' or 'self-evaluation' finishes successfully.
          requires:
            - build
            - self-evaluation
          filters:
            # We never want to publish branches, so we need to explicitly ignore all of them.
            branches:
              ignore: /.*/
            # We want to publish any tags that are formatted vXXXX, since that's our semantic versioning syntax.
            tags:
              only:
                /^v.*/
      - packaged-sanity:
          requires:
            - publish-latest
          filters:
            # We never want to publish branches, so we need to explicitly ignore all of them.
            branches:
              ignore: /.*/
            # We want to publish any tags that are formatted vXXXX, since that's our semantic versioning syntax.
            tags:
              only:
                /^v.*/
